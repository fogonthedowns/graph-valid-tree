Graph Valid Tree

You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.


Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true


Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false

Keep in mind this could be a directed or undirected graph, so simple parent child cycles, are not considered cycles.

Solution DFS

1. Create adjacency map, m
2. keep track of visited with a slice off bools
3. Create a helper that takes the map, visited list, start index, prev index
    a. if the current is visited, return false, you found a cycle
    b. mark cur visited
    c. look at he current index's neighbors
       aa. skip parent/childen visited lookups
       bb. recursively call the helper, with the neighbor's index listed as current, and the current as prev
           1. return false if its not valiid
4. range over n, if the index is not visited, return false

Time O(N) 
Space O(N), where N is the length of the edges list
